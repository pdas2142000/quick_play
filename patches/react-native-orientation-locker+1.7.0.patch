diff --git a/node_modules/react-native-orientation-locker/src/orientation.ios.js b/node_modules/react-native-orientation-locker/src/orientation.ios.js
index 06da486..f3570f9 100644
--- a/node_modules/react-native-orientation-locker/src/orientation.ios.js
+++ b/node_modules/react-native-orientation-locker/src/orientation.ios.js
@@ -7,155 +7,158 @@
 //
 
 "use strict";
+
 const OrientationNative = require("react-native").NativeModules.Orientation;
 const { NativeEventEmitter } = require("react-native");
 const LocalEventEmitter = new NativeEventEmitter(OrientationNative);
 
-var listeners = {};
-
-var id = 0;
-var META = "__listener_id";
-
-var locked = false;
+const listeners = {};
+let id = 0;
+const META = "__listener_id";
+let locked = false;
 
 function getKey(listener) {
-  if (!listener.hasOwnProperty(META)) {
-    if (!Object.isExtensible(listener)) {
-      return "F";
+    if (!listener || typeof listener !== "function") {
+        console.error("Invalid listener provided to getKey:", listener);
+        return null; // Gracefully handle invalid listeners
     }
-    Object.defineProperty(listener, META, {
-      value: "L" + ++id
-    });
-  }
-  return listener[META];
+    if (!listener.hasOwnProperty(META)) {
+        if (!Object.isExtensible(listener)) {
+            console.error("Listener is not extensible:", listener);
+            return null;
+        }
+        Object.defineProperty(listener, META, {
+            value: `L${++id}`,
+            configurable: true,
+            enumerable: false,
+        });
+    }
+    return listener[META];
 }
 
 export default class Orientation {
-  static configure = (options) => {
-    OrientationNative.configure(options);
-  };
-
-  static getOrientation = cb => {
-    OrientationNative.getOrientation(orientation => {
-      cb(orientation);
-    });
-  };
-
-  static getDeviceOrientation = cb => {
-    OrientationNative.getDeviceOrientation(deviceOrientation => {
-      cb(deviceOrientation);
-    });
-  };
-
-  static isLocked = () => {
-    return locked;
-  };
-
-  static lockToPortrait = () => {
-    locked = true;
-    OrientationNative.lockToPortrait();
-  };
-
-  static lockToPortraitUpsideDown = () => {
-    locked = true;
-    OrientationNative.lockToPortraitUpsideDown();
-  };
-
-  static lockToLandscape = () => {
-    locked = true;
-    OrientationNative.lockToLandscape();
-  };
-
-  static lockToLandscapeRight = () => {
-    locked = true;
-    OrientationNative.lockToLandscapeRight();
-  };
-
-  static lockToLandscapeLeft = () => {
-    locked = true;
-    OrientationNative.lockToLandscapeLeft();
-  };
-
-  // OrientationMaskAllButUpsideDown
-  static lockToAllOrientationsButUpsideDown = () => {
-    locked = true;
-    OrientationNative.lockToAllOrientationsButUpsideDown();
-  };
-
-  static unlockAllOrientations = () => {
-    locked = false;
-    OrientationNative.unlockAllOrientations();
-  };
-
-  static addOrientationListener = cb => {
-    var key = getKey(cb);
-    listeners[key] = LocalEventEmitter.addListener(
-      "orientationDidChange",
-      body => {
-        cb(body.orientation);
-      }
-    );
-  };
-
-  static removeOrientationListener = cb => {
-    var key = getKey(cb);
-    if (!listeners[key]) {
-      return;
-    }
-    listeners[key].remove();
-    listeners[key] = null;
-  };
-
-  static addDeviceOrientationListener = cb => {
-    var key = getKey(cb);
-    listeners[key] = LocalEventEmitter.addListener(
-      "deviceOrientationDidChange",
-      body => {
-        cb(body.deviceOrientation);
-      }
-    );
-  };
-
-  static removeDeviceOrientationListener = cb => {
-    var key = getKey(cb);
-    if (!listeners[key]) {
-      return;
-    }
-    listeners[key].remove();
-    listeners[key] = null;
-  };
-
-  static addLockListener = cb => {
-    var key = getKey(cb);
-    listeners[key] = LocalEventEmitter.addListener("lockDidChange", body => {
-      cb(body.orientation);
-    });
-  };
-
-  static removeLockListener = cb => {
-    var key = getKey(cb);
-    if (!listeners[key]) {
-      return;
-    }
-    listeners[key].remove();
-    listeners[key] = null;
-  };
-
-  static removeAllListeners = () => {
-    for (var key in listeners) {
-      if (!listeners[key]) {
-        continue;
-      }
-      listeners[key].remove();
-      listeners[key] = null;
-    }
-  };
-
-  static getInitialOrientation = () => {
-    return OrientationNative.initialOrientation;
-  };
-
-  static getAutoRotateState = cb => {
-    cb(true); // iOS not implement
-  };
+    static configure = (options) => {
+        OrientationNative.configure(options);
+    };
+
+    static getOrientation = (cb) => {
+        if (typeof cb === "function") {
+            OrientationNative.getOrientation((orientation) => {
+                cb(orientation);
+            });
+        } else {
+            console.error("Callback for getOrientation must be a function.");
+        }
+    };
+
+    static getDeviceOrientation = (cb) => {
+        if (typeof cb === "function") {
+            OrientationNative.getDeviceOrientation((deviceOrientation) => {
+                cb(deviceOrientation);
+            });
+        } else {
+            console.error("Callback for getDeviceOrientation must be a function.");
+        }
+    };
+
+    static isLocked = () => locked;
+
+    static lockToPortrait = () => {
+        locked = true;
+        OrientationNative.lockToPortrait();
+    };
+
+    static lockToPortraitUpsideDown = () => {
+        locked = true;
+        OrientationNative.lockToPortraitUpsideDown();
+    };
+
+    static lockToLandscape = () => {
+        locked = true;
+        OrientationNative.lockToLandscape();
+    };
+
+    static lockToLandscapeRight = () => {
+        locked = true;
+        OrientationNative.lockToLandscapeRight();
+    };
+
+    static lockToLandscapeLeft = () => {
+        locked = true;
+        OrientationNative.lockToLandscapeLeft();
+    };
+
+    static lockToAllOrientationsButUpsideDown = () => {
+        locked = true;
+        OrientationNative.lockToAllOrientationsButUpsideDown();
+    };
+
+    static unlockAllOrientations = () => {
+        locked = false;
+        OrientationNative.unlockAllOrientations();
+    };
+
+    static addOrientationListener = (cb) => {
+        const key = getKey(cb);
+        if (!key) return; // Skip if key is invalid
+        listeners[key] = LocalEventEmitter.addListener("orientationDidChange", (body) => {
+            cb(body.orientation);
+        });
+    };
+
+    static removeOrientationListener = (cb) => {
+        const key = getKey(cb);
+        if (!key || !listeners[key]) return; // Skip if listener doesn't exist
+        listeners[key].remove();
+        delete listeners[key];
+    };
+
+    static addDeviceOrientationListener = (cb) => {
+        const key = getKey(cb);
+        if (!key) return; // Skip if key is invalid
+        listeners[key] = LocalEventEmitter.addListener("deviceOrientationDidChange", (body) => {
+            cb(body.deviceOrientation);
+        });
+    };
+
+    static removeDeviceOrientationListener = (cb) => {
+        const key = getKey(cb);
+        if (!key || !listeners[key]) return; // Skip if listener doesn't exist
+        listeners[key].remove();
+        delete listeners[key];
+    };
+
+    static addLockListener = (cb) => {
+        const key = getKey(cb);
+        if (!key) return; // Skip if key is invalid
+        listeners[key] = LocalEventEmitter.addListener("lockDidChange", (body) => {
+            cb(body.orientation);
+        });
+    };
+
+    static removeLockListener = (cb) => {
+        const key = getKey(cb);
+        if (!key || !listeners[key]) return; // Skip if listener doesn't exist
+        listeners[key].remove();
+        delete listeners[key];
+    };
+
+    static removeAllListeners = () => {
+        Object.keys(listeners).forEach((key) => {
+            if (listeners[key]) {
+                listeners[key].remove();
+                delete listeners[key];
+            }
+        });
+    };
+
+    static getInitialOrientation = () => OrientationNative.initialOrientation;
+
+    static getAutoRotateState = (cb) => {
+        if (typeof cb === "function") {
+            cb(true); // iOS does not implement this feature
+        } else {
+            console.error("Callback for getAutoRotateState must be a function.");
+        }
+    };
 }
